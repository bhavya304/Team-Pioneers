-------->flavour fusion(using google genAI paLM)

google model- gemini-1.5-pro
API key-  AIzaSyDkBylXkZBmAS1d9KjS1ndVAumG1EaR2JQ

1)!pip install google-generativeai pandas


-------------------------------------------------------------------------------------------------------------

2)import google.generativeai as genai

API_KEY = "AIzaSyDkBylXkZBmAS1d9KjS1ndVAumG1EaR2JQ"  # Replace with your actual key
genai.configure(api_key=API_KEY)

print("‚úÖ API Key Configured Successfully!")


------------------------------------------------------------------------------------------------------------

3)for model in genai.list_models():
    print(model.name)


------------------------------------------------------------------------------------------------------------

4)model = genai.GenerativeModel("gemini-1.5-pro")  # Change to an available model
response = model.generate_content("Tell me a joke")
print(response.text)


----------------------------------------------------------------------------------------------------------

5)

import google.generativeai as genai
import pandas as pd
import re
import os
import random
from IPython.display import display, Image

# Initialize Google GenAI
GOOGLE_API_KEY = "AIzaSyDkBylXkZBmAS1d9KjS1ndVAumG1EaR2JQ"  # Replace with your actual API key
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel("gemini-1.5-pro-002")

# Load dataset
if not os.path.exists('cuisines.csv'):
    print("\u274C Error: 'cuisines.csv' not found! Please check the file path.")
    exit()

try:
    df = pd.read_csv('cuisines.csv', encoding='utf-8', on_bad_lines='skip', delimiter=',')
except Exception as e:
    print(f"\u274C Error reading CSV: {e}")
    exit()

df.columns = df.columns.str.strip().str.lower()

# Allergy substitution dictionary with flavor-matching replacements
allergy_substitutes = {
    "milk": "coconut milk",
    "butter": "avocado or olive oil",
    "peanut": "cashew butter",
    "egg": "flaxseed meal + water",
    "cheese": "vegan cheese or cashew paste",
    "soy": "tamari or coconut aminos",
    "flour": "almond flour or oat flour",
    "honey": "agave syrup",
    "mustard": "horseradish or turmeric",
    "cumin": "caraway seeds or coriander"
}

# Function to replace allergic ingredients with alternatives
def handle_allergies(ingredients, instructions, allergic_ingredients):
    if not allergic_ingredients:
        return ingredients, instructions

    allergic_list = [a.strip().lower() for a in allergic_ingredients.split(',')]
    modified_ingredients = []

    for ingredient in ingredients.split(','):
        ingredient = ingredient.strip()

        for allergen in allergic_list:
            if allergen in ingredient.lower():
                ingredient = ingredient.lower().replace(allergen, allergy_substitutes.get(allergen, "[REMOVED]"))

        if ingredient != "[REMOVED]":
            modified_ingredients.append(ingredient)

    updated_ingredients = ', '.join(modified_ingredients)
    
    for allergen in allergic_list:
        instructions = re.sub(rf'\b{allergen}\b', allergy_substitutes.get(allergen, '[REMOVED]'), instructions, flags=re.IGNORECASE)
    
    return updated_ingredients, instructions

# Function to adjust only spicy ingredients' quantities
def adjust_spice_level(ingredients, spice_level):
    adjusted_ingredients = []
    spice_keywords = ["chili", "pepper", "curry", "spice", "paprika"]

    for ingredient in ingredients.split(','):
        ingredient = ingredient.strip()
        match = re.match(r'(\d*\.?\d*)\s*([a-zA-Z\s()\-,]*)', ingredient)

        if match:
            quantity = match.group(1).strip()
            item = match.group(2).strip()

            if any(spice in item.lower() for spice in spice_keywords):
                if quantity:
                    quantity = float(quantity) if '.' in quantity else int(quantity)
                    quantity *= 1.5 if spice_level == "spicy" else 0.5 if spice_level == "medium" else 0.3
                    quantity = round(quantity, 2)
                    adjusted_ingredients.append(f"{quantity} {item}")
                else:
                    adjusted_ingredients.append(item)
            else:
                adjusted_ingredients.append(ingredient)
        else:
            adjusted_ingredients.append(ingredient)

    return ', '.join(adjusted_ingredients)

# Function to generate recipe with AI (single version based on skill level)
def generate_recipe_with_ai(name, spice_level, allergic_ingredients, skill_level):
    """Generates a recipe using Google Gemini AI with step-wise format and AI-generated image."""

    # Recipe generation prompt with only one version (Beginner or Pro)
    text_prompt = f"""
    Create a detailed recipe for "{name}" with {spice_level} spice level.
    Substitute these allergic ingredients with suitable alternatives: {allergic_ingredients}.

    Cooking Skill Level: {skill_level}
    - If beginner, provide very detailed step-by-step instructions, including explanations for techniques.
    - If pro, give concise but clear instructions assuming prior knowledge.

    Output Format:
    - Cuisine Type
    - Diet (Vegetarian or Non-Vegetarian)
    - Ingredients List
    - Cooking Time
    - Step-by-Step Instructions (only one version, based on skill level).
    """

    # Generate text recipe
    response = model.generate_content(text_prompt)
    recipe_text = response.text if response else "‚ùå AI could not generate the recipe."

    return recipe_text

# Function to fetch or generate a recipe
def get_recipe_by_name(name, word_count, spice_level, allergic_ingredients, skill_level):
    recipe = df[df['name'].str.contains(name, case=False, na=False)]
    
    if not recipe.empty:
        selected_recipe = recipe.iloc[0]
        ingredients = selected_recipe['ingredients']
        instructions = selected_recipe['instructions']

        # Handle allergies and adjust spice levels
        ingredients, instructions = handle_allergies(ingredients, instructions, allergic_ingredients)
        ingredients = adjust_spice_level(ingredients, spice_level)
        ingredients = re.sub(r'\s+', ' ', ingredients).strip()

        # Modify instructions based on skill level
        if skill_level == "beginner":
            instruction_steps = instructions.split('. ')
            instructions = "\n".join([f"Step {idx + 1}: {step.strip()}." for idx, step in enumerate(instruction_steps)])
        
        # Display Image
        if pd.notna(selected_recipe.get('image_url', None)):
            display(Image(url=selected_recipe['image_url'], width=600, height=500))

        return f"""
        üçΩ Recipe: {selected_recipe['name']}
        üåç Cuisine: {selected_recipe['cuisine']}
        ‚è≥ Time Required: {selected_recipe['prep_time']} mins
        ü•ò Ingredients: {ingredients}
        ü•¶ Diet: {selected_recipe['diet']}
        üìú Instructions:
        {instructions}
        """
    
    else:
        print("\n Generating using AI...\n")
        return generate_recipe_with_ai(name, spice_level, allergic_ingredients, skill_level)

# Function to display a food joke
def display_joke():
    jokes = [
        "Why did the chef break up with the recipe? It just wasn‚Äôt working out!",
        "I told my wife she should embrace her mistakes. She gave me a hug.",
        "What‚Äôs a programmer‚Äôs favorite type of food? Cookies... especially the ones in the browser!",
        "Why did the computer take up baking? It wanted to improve its 'byte' size!",
        "I love cooking with wine. Sometimes I even put it in the food!"
    ]
    print(f"\nü§£ Foodie Joke: {random.choice(jokes)}\n")

# Main Execution
if __name__ == "__main__":
    recipe_name = input("üîç Enter the recipe name: ")
    word_count = int(input("‚úçÔ∏è Enter the number of words for instructions: "))
    spice_level = input("üå∂Ô∏è Enter spice level (Mild/Medium/Spicy): ").strip().lower()
    allergic_ingredients = input("üö´ Enter if any dietary restrictions(comma-separated, optional): ").strip()
    skill_level = input("üéì Enter experience levels (Beginner/Pro): ").strip().lower()
    
    display_joke()
    print("\nüîç Fetching your recipe...\n")
    
    recipe_text = get_recipe_by_name(recipe_name, word_count, spice_level, allergic_ingredients, skill_level)
    print(recipe_text)
